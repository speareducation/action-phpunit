---
name: Spear PHPUnit Runner
description: A GitHub action to run PHPUnit and record test coverage
branding:
  icon: check-circle
  color: green
runs:
  using: composite
  steps:
    - id: run-tests
      run: |
        set -x
        cp ${GITHUB_ACTION_PATH}/entrypoint.sh .
        mkdir -p "${{ inputs.targetDir }}"
        if [[ "x${{job.container.id}}" != "x" ]]; then
          VOLUMES="--volumes-from ${{job.container.id}}"
        else
          VOLUMES="-v $(pwd):${GHITHUB_WORKSPACE}:rw"
        fi
        docker run --rm ${VOLUMES} \
          -w "${GITHUB_WORKSPACE}" \
          --network ${{ inputs.containerNetwork }} \
          -e INPUT_COMPOSER_VERSION="${{ inputs.composerVersion }}" \
          -e INPUT_OPTIONS="${{ inputs.options }}" \
          -e INPUT_TARGETDIR="${{ inputs.targetDir }}" \
          -e SKIP_SECRETS=1 \
          -e SKIP_SERVICES=1 \
          --entrypoint="${GITHUB_WORKSPACE}/entrypoint.sh" ${{ inputs.dockerImage }}
        outputFile="${{ inputs.targetDir }}/phpunit-results.txt"
        SUCCESS=$(cat $outputFile | grep -q OK && echo 'true' || echo 'false')
        SUMMARY=$(grep -i 'assertions' "$outputFile" | grep -i 'tests')
        RESULT_TEXT=$([ "$SUCCESS" == "true" ] && echo "PASS" || echo "FAIL")
        RESULT_EMOJI=$([ "$SUCCESS" == "true" ] && echo ':white_check_mark:' || echo ':x:')
        
        echo SUCCESS="${SUCCESS}"
        echo SUMMARY="${SUMMARY}"
        
        echo "::set-output name=success::${SUCCESS}"
        echo "::set-output name=summary::${SUMMARY}"
        echo "::set-output name=result-text::${RESULT_TEXT}"
        echo "::set-output name=result-emoji::${RESULT_EMOJI}"
        echo "Done running unit tests"
      shell: bash
inputs:
  containerNetwork:
    description: Network to use when creating the test container
    required: true
  dockerImage:
    description: Name of docker image to use to run tests
    required: true
  targetDir:
    description: Target Directory
    required: true
  options:
    description: Options to append to phpunit command
    required: false
  composerVersion:
    description: Use version 1 or 2 of composer
    required: false
outputs:
  success:
    description: "'true' or 'false'"
    value: ${{ steps.run-tests.outputs.success }}
  summary:
    description: A short description of the results, including the number of assertions, failures, errors, etc.
    value: ${{ steps.run-tests.outputs.summary }}
  result-text:
    description: "'PASS' or 'FAIL'"
    value: ${{ steps.run-tests.outputs.result-text }}
  result-emoji:
    description: A different emoji depending on whether the tests passed or failed.
    value: ${{ steps.run-tests.outputs.result-emoji }}

